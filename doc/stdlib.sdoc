Standard library design.
Rift's standard library differs fairly significantly from Ruby's, but not in ways that break much stuff. This file covers some of these design choices.

Metaclasses.
The Class class can now be subclassed, and this is done a lot in Rift's standard library. There are several places where this is used:

| 1. Singleton classes are instances of SingletonClass, which is a subclass of Class. SingletonClasses can't be subclassed.
  2. Many VM-internal classes are instances of NativeClass, which is a subclass of Class and uses a custom memory layout.
  3. Any class can be compiled into a CompactedClass, which uses a compact layout for a known set of instance variables.

Classes get to specify the protocol for accessing local data. This is important both for optimization and for consistency reasons. Specifically, instance variable assignment and access are
proxied through the instance_variable_get and instance_variable_set methods:

| class Foo
    def initialize
      @x = 1            # translated into instance_variable_set :"@x", 1
      @y = 2            # translated into instance_variable_set :"@y", 2
    end
  end

Multithreading.
This Ruby is kind of multithreaded. It is multithreaded in the sense that you can have a program doing two things at the same time. It isn't multithreaded in the sense that no memory is ever
shared between the two processes. This works by using an Erlang-style shared-nothing setup; each process has its own independent heap space and garbage collector, so the set of references
between them is always disjoint. (Messages can be passed between processes using copying.)

Also, there's a lot of stuff you can do with continuations and cooperative multithreading. This is one of the big reasons I made sure they performed well. It's also the main reason that all of
the normal IO operations are internally nonblocking and respond to various continuation-manipulating combinators.
