#!/usr/bin/env ruby
#
# Does Ruby cache the results of virtual method lookups?
#
# Test: Define two classes A and B. A's inheritance chain is much shorter than
#       B's. If it takes longer to resolve methods on B, then Ruby probably
#       does not perform virtual method caching.

class A < Object
  def to_s
    'foo'
  end
end

class B < A
end

class C < B
end

class D < C
end

class E < D
end

class F < E
end

as = (1 ... 1000000).map {A.new}
bs = (1 ... 1000000).map {B.new}
cs = (1 ... 1000000).map {C.new}
ds = (1 ... 1000000).map {D.new}
es = (1 ... 1000000).map {E.new}
fs = (1 ... 1000000).map {F.new}

require 'benchmark'

Benchmark.benchmark do |b|
  total = 0; b.report('immediate dispatch')     {as.each {|a| total += a.to_s.size}}
  total = 0; b.report('first parent dispatch')  {bs.each {|b| total += b.to_s.size}}
  total = 0; b.report('second parent dispatch') {cs.each {|c| total += c.to_s.size}}
  total = 0; b.report('third parent dispatch')  {ds.each {|d| total += d.to_s.size}}
  total = 0; b.report('fourth parent dispatch') {es.each {|e| total += e.to_s.size}}
  total = 0; b.report('fifth chain dispatch')   {fs.each {|f| total += f.to_s.size}}
end
