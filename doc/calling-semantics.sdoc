Semantics of method calls.
Unlike MRI and YARV, method calls are stackless. This means that continuations are invoked without the caller creating a new frame. This makes tail-call optimization easier, but requires some
extra bookkeeping for normal returning calls.

The difference between a tail call and a returning call is the context. For example:

def foo
  bar
  bif
  baz
end
puts foo

The AST represents each sequence element within 'foo' as a call(head, k -> tail). So the returning continuation is set to the tail pointer, which signifies the 'rest' of the computation. (For
this reason, sequence elements right-associate.)

foo:
  cons(void(invoke(bar)),
       cons(void(invoke(bif)),
            invoke(baz)))
cons(invoke(foo), invoke(puts))

The semantics of a cons() is this:

invoke(cons(A, B)) = invoke(B, invoke(A))

That is, a CPS-converted sequence is evaluated dependencies-first. Implicit to this design (and the fact that we cons 'improperly' in Lisp terms) is that tail calls are automatically invoked
as such. This happens because 'cons' is used as an infix operator and thus produces heterogeneous 'lists' (if you want to think about it in those terms). Because cons is the function that
produces return continuations, there will be one fewer return continuation than there are distinct statements; thus a tail call used to return to the original context.
