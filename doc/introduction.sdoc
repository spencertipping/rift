Rift: Ruby In Functional Terms.
I started this project because my wife wanted a faster Ruby runtime for her birthday. Seriously. She came up to me and said "Spencer, I want you to write a faster Ruby runtime so that web
programmers don't all jump to Scala instead." Logical enough, I suppose. So I did some reading and started writing Rift.

Introduction.
Rift is a self-hosting JIT compiler written entirely in Ruby. Here's the project structure:

| 1. src/core.*         This implements a subset of Ruby called Rift-core. It's written in itself, which is important because it will later be used to interpret itself.
  2. src/asm.*          Implements processor-specific assembler backends. These are used by compilers to compile Ruby to machine code -- this happens both during JIT and to create
                        bin/rift-$os-$arch.
  3. src/compiler.*     Implements the high-level logic to transform Rift-core code into low-level constructs that the assembly layer can understand. Compilers can be specialized to include
                        other syntactic constructs.
  4. src/lib.*          Miscellaneous library functions used by other components.
  5. src/stdlib.*       An implementation of the Ruby standard library in Rift-core.

Here's how Rift is built:

| 1. MRI or YARV is used to interpret the Rift-core compiler, which is run on its own source. This yields a binary called bin/rift-$os-$arch.boot (e.g. bin/rift-linux-x64.boot for me).
  2. Because this compiled version can't have been traced, it is unoptimized. To fix this, bin/rift-linux-x64.boot is run on its own source code and produces traces and JIT segments. This
     information is used to emit a more performant version, bin/rift-linux-x64.pre.
  3. As a final integration test, bin/rift-linux-x64.pre is run exactly as bin/rift-linux-x64.boot was, producing bin/rift-linux-x64. This should be identical to bin/rift-linux-x64.pre; if
     not, then the JIT compiler isn't transparent under Ruby semantics.

Contents.
Most of the high-level stuff is contained in this doc/ directory. Here's what each file documents (listed in the recommended reading order):

| literature.sdoc
  Background reading (useful if you're new to compiler writing, as I was when I started this project). I highly recommend consulting this if something in the source code doesn't make sense;
  there's a lot of fairly esoteric functional stuff going on.

| boot-core.sdoc
  Talks about the core language that the compiler handles. This is a simplified subset of Ruby that eliminates a bunch of complexity. I also talk a bit about where the standard library picks
  up, which is further discussed in boot-stdlib.sdoc.

| compiler.sdoc
  Discusses unoptimized compilation at a high level. This includes talking about the parser, lexical scope analyzer, CPS converter, etc. After reading this and x64-compiler.sdoc, the process
  by which Rift interprets stuff (without traced optimization) should mostly make sense.

| x64-compiler.sdoc
  A fairly detailed low-level design of the initial x86-64 compiler. This particular compiler generates unoptimized code that is then traced and given to the optimizer when a hotspot is
  identified. However, the details of this compiler are very important because the structures that it uses are accessed as Ruby classes by the optimizer.

| x64-gc.sdoc
  Gory details of the garbage collector for x86-64. It's callable as a method on Rift::Kernel and runs automatically when the heap is full. This is an implementation detail more than an API
  that gets used elsewhere, so there isn't a particular reason to read it unless you're interested to see how Rift collects garbage.

| stdlib.sdoc
  Talks about the design decisions behind the standard library, and in particular where it deviates from the one implemented by MRI/YARV. For low-level implementation details such as
  performance bounds, the individual source files are your best bet. Each method contains a description of its time and space complexity in the comments.

| x64-optimizer.sdoc
  A fairly detailed low-level design of the x86-64 tracer and optimizer. Discusses the kinds of processor-specific optimizations that get performed, along with the assumptions required to
  perform them. Also goes into details about the internals of the JIT system.
