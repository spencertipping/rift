Rift: Ruby In Functional Terms.
I started this project because my wife wanted a faster Ruby runtime for her birthday. Seriously. She came up to me and said "Spencer, I want you to write a faster Ruby runtime so that web
programmers don't all jump to Scala instead." Logical enough, I suppose. So I did some reading and started writing Rift.

Introduction.
Rift is a self-hosting JIT compiler written entirely in Ruby. Here's the project structure:

| 1. src/core.*         This implements a subset of Ruby called Rift-core. It's written in itself, which is important because it will later be used to interpret itself.
  2. src/asm.*          Implements processor-specific assembler backends. These are used by compilers to compile Ruby to machine code -- this happens both during JIT and to create
                        bin/rift-$os-$arch.
  3. src/compiler.*     Implements the high-level logic to transform Rift-core code into low-level constructs that the assembly layer can understand. Compilers can be specialized to include
                        other syntactic constructs.
  4. src/lib.*          Miscellaneous library functions used by other components.
  5. src/stdlib.*       An implementation of the Ruby standard library in Rift-core.

Here's how Rift is built:

| 1. MRI or YARV is used to interpret the Rift-core compiler, which is run on its own source. This yields a binary called bin/rift-$os-$arch.boot (e.g. bin/rift-linux-x64.boot for me).
  2. Because this compiled version can't have been traced, it is unoptimized. To fix this, bin/rift-linux-x64.boot is run on its own source code and produces traces and JIT segments. This
     information is used to emit a more performant version, bin/rift-linux-x64.pre.
  3. As a final integration test, bin/rift-linux-x64.pre is run exactly as bin/rift-linux-x64.boot was, producing bin/rift-linux-x64. This should be identical to bin/rift-linux-x64.pre; if
     not, then the JIT compiler isn't transparent under Ruby semantics.

Design.
As the name suggests, I decided to interpret Ruby in a different way than it's normally done. First, I'm emphasizing functional constructs and performance over object-oriented stuff. This
means that closure allocation and local variable access are really fast, full re-entrant continuations are supported and are also fast, and a lot of compiler internals are available for you to
use from the standard library.

Second, Rift isn't really Ruby. Specifically, it's a function that produces Ruby-ish interpreters and compilers. To be exact, Rift lets you change the way Ruby behaves at a much lower level
than most programmers are used to. So, for example, the 'class' and 'def' constructs were added to the base language after the fact:

normal_ruby = Rift::Compiler.new do
  block_form 'class :name', :name => Rift::Tree::Constant do
    self.const_set name, Class.new &body
  end

  block_form 'class :name < :base', :name => Rift::Tree::Constant, :base => Rift::Tree::Expression do
    self.const_set name, Class.new(base, &body)
  end

  block_form 'class << :expression', :expression => Rift::Tree::Expression do
    expression.singleton_class.class_eval &body
  end

  create_a_method = lambda do
    self.define_method method, Rift::Compiler.compile_method(formals, body)
    self
  end

  block_form 'def :method :formals',  :method => Rift::Tree::Identifier, :formals => Rift::Tree::Formals, &create_a_method
  block_form 'def :method(:formals)', :method => Rift::Tree::Identifier, :formals => Rift::Tree::Formals, &create_a_method
end

You can then replace the normal Kernel#require method (though there are less heavy-handed ways to achieve a similarly convenient API):

class Kernel
  def require file
    normal_ruby.require file
  end
end

On top of this, you can add your own operators and other syntactic forms. Please don't misuse this flexibility! You're probably best off not using it at all, but in the spirit of flexibility
that made Rails a ghetto I'm making it available as a feature if you want to use it.

  Important differences from MRI/YARV.
  Rift isn't 100% compliant as a Ruby implementation, though most of the incompatibilies aren't particularly noticeable. Here are some of the big ones:

  | 1. Rift doesn't expose a C API. You can use Rift::FFI classes to call external C libraries, but there isn't a straightforward way to call back from C or C++.
    2. Everything is a closure. Class bodies, method bodies, etc. are all lexically scoped and can refer to surrounding variables.
    3. You can now subclass Class, and the Rift standard library contains several such subclasses.
    4. No guarantees at all are made about the binary representation of objects.
    5. The class hierarchy may differ from the MRI/YARV standard, though it should be compatible (i.e. parent relationships should be preserved through transitivity).

Rift-core.
Rift-core is the core language used to bootstrap the compiler. I chose to do it this way to simplify the bootstrapping logic; Ruby itself is a complex language, whereas Rift-core is about as
simple as Smalltalk. Unlike Ruby, Rift-core's semantics are centered around continuations and method calls. Its primitive semantic elements are:

| 1. Method invocation
  2. Side-effecting sequential evaluation
  3. Closure construction via blocks

Its syntax is constructed to be valid Ruby despite being evaluated differently. Note, however, that it is a subset; not all valid Ruby is valid Rift-core. Rift-core's compiler is implemented
as an extensible library to allow addition of Ruby constructs and specialization beyond pure Ruby.
