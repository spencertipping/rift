X86-64 static compiler.
This compiler doesn't optimize stuff. It just provides a basis for behavior and makes as much stuff as possible into first-class objects.

Purpose.
This compiler is really more of an interpreter for Ruby code. The only reason it compiles to machine code is to act as a bootstrap layer so that I don't have to write anything in C/C++. (See
doc/introduction.sdoc for information about how this bootstrapping works.) That said, even this unoptimizing compiler should run Ruby quite a bit faster than MRI or YARV. Hotspots then get
further optimized by tracing and doing proper register allocation and other fun stuff.

Non-standard calling convention.
The regular GCC calling convention for x86-64 is almost what we want. The only differences are that (1) we need to pass control to the next continuation (as opposed to the usual return
address), and (2) we need to pass pointers to the lexical and dynamic invocation contexts.

Lexical context.
Here's the memory layout:

| 1. Pointer to closure-specific lexical context v-class.
  2. Array of pointers to all referenced parent contexts. This is stored inline, and accessible via the 'parent(n)' method.
  3. Array of local variable values. This is also stored inline and accessible via the '[:name]' method.

In addition to these fields, lexical contexts can resolve parent variables using the 'scope_for(:name)' and 'resolve(:name)' methods. (The [] method doesn't do any parent resolution for
performance purposes.)

Lexical contexts have nonstandard metaclasses. This means that instance_variable_get and instance_variable_set are disabled, which lets us do some fun stuff with inline storage. Also, the
fields of a lexical context are immutable; there is no way to add or remove parent scopes, nor is there a way to add or remove local variables. These decisions were made for performance
reasons, and as a result are baked into the metaclass, which is a subclass of NativeClass. (See doc/stdlib.sdoc for an explanation of NativeClass and other metaclasses.) This results in
customized method dispatch code.

Dynamic invocation context.
Here's the memory layout:

| 1. Pointer to dynamic context v-class (this makes dynamic contexts accessible from Ruby code).
  2. Pointer to exception hashtable, which is also an object. Stored as '@exceptions'.
  3. Pointer to dynamic variable hashtable, which is also an object. This is stored as '@dynamic_variables'.
  4. Pointer to continuation stack, which consists of immutable, garbage-collected cons cells. Stored as '@continuations'.
  5. Pointer to global v-table. Stored as '@global_vtable'.

Note that the continuation stack isn't stored like the regular x86 call stack. The reason is that continuation returns must be garbage collected due to the possibility of re-entry; consider,
for example, code like this:

| puts callcc do |cc|
    @k = cc
    'returned normally'
  end
  # ...
  @k.call 'used in a re-entrant context'

The dynamic context has methods to perform various operations, such as adding/removing handlers from the exception hashtable, adding/removing dynamic variables, and adding/removing
continuations from the stack -- however, using these methods in your own code is really dangerous and can cause awful things to happen (keep in mind that the dynamic context is updated
automatically when you call its methods).

  Continuation stack.
  This is used to process the return value of a virtual method call. For instance:

  | x = puts 'foo'

  Here, the literal 'foo' signals that a string should be constructed; this is then passed into the 'puts' method (a virtual call). After doing this, the dynamic invocation context's stack
  gets the continuation '\y -> x = y' prepended onto it. This basically forms a return address. That continuation will be invoked, and its result is then passed to the next continuation on the
  stack (the bottom of the stack has the continuation \x -> exit 0, which never returns).

  Tail call optimization.
  Sometimes no continuation is pushed onto the stack. If there is no subsequent statement (i.e. the continuation that we would have pushed is trivial), then no new continuation is created;
  instead, the one already at the front of the stack is used. More formally, a binary 'sequence' operator will cause a new continuation to be pushed, and the last statement in a method has no
  such operator surrounding it. (See doc/compiler.sdoc for details.)

  Each continuation has a link both to its implementation code and to its closure environment. Continuations exist as garbage-collectible entities (important for the next section).

  Re-entrant continuations.
  call/cc creates a reference to its current continuation, which is just the head of the @continuations stack after the new continuation is appended. Because the stack consists of immutable
  cons cells, it's possible to return to this point later on. The exact procedure is simply to set the @continuations pointer to the one you want to resume from and then specify a return
  value. The continuation you want to use will be saved in memory because you're holding a reference to it.

Continuations.
A continuation is just a pair of a lexical context and an unbound-code reference. This is a class of its own:

| 1. Pointer to continuation v-class.
  2. Pointer to lexical context (accessible as '@context').
  3. Pointer to unbound code reference (accessible as '@code').

Register usage.
Untraced code (which is what this compiler generates) knows to use specific registers for certain things. Here's the setup:

| %rsi
  Static frame context pointer. If you want to call a closure, you set this to be the lexical context for that closure. So, for example:

  | movq 16(continuation), %r8          # code pointer
    movq 8(continuation), %rsi          # lexical context pointer
    jmp  *%r8                           # tail-call the continuation

  Note that unless you're writing a tail call you'll probably want to create a return continuation. This is covered next.

| %rdi
  Dynamic frame context pointer. Generally you won't need to change this because calls usually share dynamic contexts. However, all that's involved in changing it is modifying the %rdi
  register. (You'll probably want to stash the original value somewhere too.) Most %rdi usage is to access the receiver and the continuation stack. See doc/pieces/x64-continuation-* for
  details about how the dynamic context's continuation stack is updated.

| %rsp
  Heap/stack pointer. This is used for quick memory allocation, and occasionally is reset during garbage collection. (See doc/x64-gc.sdoc for details.) The garbage collector maintains space
  below %rsp so that you can allocate new values without stuff blowing up. %rsp is treated like a usual stack; that is, you can just decrement it manually and be reasonably confident that
  nothing will go wrong (as long as you don't allocate too much memory this way).

| %rbp, %rax, %rbx, %rcx, %rdx, %r8, %r9, %10, %r11, %r12, %r13, %r14, %r15
  Up for grabs. These registers can be clobbered by continuations and should be initialized prior to use.
