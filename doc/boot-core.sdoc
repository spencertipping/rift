Core bootstrapping language.
This language is used to bootstrap the Rift binary and provide a basis for talking to the compiler. It supports the minimal set of features required to run a language similar to Ruby, and
largely avoids the noise that is introduced by more advanced Ruby features.

There are four main things this bootstrap language understands:

| 1. Method calls.
  2. The block forms for closures. (Deliberately phrased this way, since methods are also closures.)
  3. Order of evaluation.
  4. Syntax for various kinds of literals (these are translated into constructor invocations).

Things that are conspicuously /not/ supported:

| 1. if, for, while, until, case, rescue, etc.
  2. Declarative syntax for creating classes, modules, and methods.
  3. Lots of Kernel methods, and most internal primitive classes.

It also comes with a very minimal set of classes, each with a minimal set of methods.

Core classes and methods.
I don't list these here; rather, this just goes over the rationale for their existence and how they are constructed. The core classes are implemented in Ruby, but their methods are bound to
pre-written machine language snippets.

Because no conditionals exist, each object provides 'if_true' and 'if_false' methods. These are used to determine truthiness of various things, and can be overridden if you want to emulate
other languages. For example, here's a common conditional statement and its equivalent boot-core representation:

if defined? foo                 defined?(foo).if_true do
  puts 'defined!'                 puts 'defined!'
end                             end

This is one of the reasons that closures need to be really fast. Similarly, you can build simple iteration constructs like this:

while foo                       lambda {foo}.while_true do
  puts 'foo is true!'             puts 'foo is true!'
end                             end


